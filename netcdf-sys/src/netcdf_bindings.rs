/* automatically generated by rust-bindgen */

pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
pub type errno_t = ::libc::c_int;
pub type nc_type = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub len: size_t,
    pub p: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nc_vlen_t = Struct_Unnamed1;
pub type nclong = ::libc::c_int;
#[link(name = "netcdf")]
extern "C" {
    pub static mut ncerr: ::libc::c_int;
    pub static mut ncopts: ::libc::c_int;
}
#[link(name = "netcdf")]
extern "C" {
    pub fn __error() -> *mut ::libc::c_int;
    pub fn nc_inq_libvers() -> *const ::libc::c_char;
    pub fn nc_strerror(ncerr: ::libc::c_int) -> *const ::libc::c_char;
    pub fn nc__create(path: *const ::libc::c_char, cmode: ::libc::c_int,
                      initialsz: size_t, chunksizehintp: *mut size_t,
                      ncidp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_create(path: *const ::libc::c_char, cmode: ::libc::c_int,
                     ncidp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc__open(path: *const ::libc::c_char, mode: ::libc::c_int,
                    chunksizehintp: *mut size_t, ncidp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_open(path: *const ::libc::c_char,
                   mode: ::libc::c_int,
                   ncidp: *mut ::libc::c_int) -> ::libc::c_int;

    pub fn nc_open_mem(path: *const ::libc::c_char,
                       mode: ::libc::c_int,
                       size: size_t,
                       memory: *mut ::libc::c_int,
                       ncidp: *mut ::libc::c_int) -> ::libc::c_int;

    pub fn nc_inq_path(ncid: ::libc::c_int, pathlen: *mut size_t,
                       path: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_inq_ncid(ncid: ::libc::c_int, name: *const ::libc::c_char,
                       grp_ncid: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_grps(ncid: ::libc::c_int, numgrps: *mut ::libc::c_int,
                       ncids: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_grpname(ncid: ::libc::c_int, name: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_inq_grpname_full(ncid: ::libc::c_int, lenp: *mut size_t,
                               full_name: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_inq_grpname_len(ncid: ::libc::c_int, lenp: *mut size_t)
     -> ::libc::c_int;
    pub fn nc_inq_grp_parent(ncid: ::libc::c_int,
                             parent_ncid: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_grp_ncid(ncid: ::libc::c_int,
                           grp_name: *const ::libc::c_char,
                           grp_ncid: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_grp_full_ncid(ncid: ::libc::c_int,
                                full_name: *const ::libc::c_char,
                                grp_ncid: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_varids(ncid: ::libc::c_int, nvars: *mut ::libc::c_int,
                         varids: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_dimids(ncid: ::libc::c_int, ndims: *mut ::libc::c_int,
                         dimids: *mut ::libc::c_int,
                         include_parents: ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_typeids(ncid: ::libc::c_int, ntypes: *mut ::libc::c_int,
                          typeids: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_type_equal(ncid1: ::libc::c_int, typeid1: nc_type,
                             ncid2: ::libc::c_int, typeid2: nc_type,
                             equal: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_def_grp(parent_ncid: ::libc::c_int, name: *const ::libc::c_char,
                      new_ncid: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_rename_grp(grpid: ::libc::c_int, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_def_compound(ncid: ::libc::c_int, size: size_t,
                           name: *const ::libc::c_char, typeidp: *mut nc_type)
     -> ::libc::c_int;
    pub fn nc_insert_compound(ncid: ::libc::c_int, xtype: nc_type,
                              name: *const ::libc::c_char, offset: size_t,
                              field_typeid: nc_type) -> ::libc::c_int;
    pub fn nc_insert_array_compound(ncid: ::libc::c_int, xtype: nc_type,
                                    name: *const ::libc::c_char,
                                    offset: size_t, field_typeid: nc_type,
                                    ndims: ::libc::c_int,
                                    dim_sizes: *const ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_type(ncid: ::libc::c_int, xtype: nc_type,
                       name: *mut ::libc::c_char, size: *mut size_t)
     -> ::libc::c_int;
    pub fn nc_inq_typeid(ncid: ::libc::c_int, name: *const ::libc::c_char,
                         typeidp: *mut nc_type) -> ::libc::c_int;
    pub fn nc_inq_compound(ncid: ::libc::c_int, xtype: nc_type,
                           name: *mut ::libc::c_char, sizep: *mut size_t,
                           nfieldsp: *mut size_t) -> ::libc::c_int;
    pub fn nc_inq_compound_name(ncid: ::libc::c_int, xtype: nc_type,
                                name: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_inq_compound_size(ncid: ::libc::c_int, xtype: nc_type,
                                sizep: *mut size_t) -> ::libc::c_int;
    pub fn nc_inq_compound_nfields(ncid: ::libc::c_int, xtype: nc_type,
                                   nfieldsp: *mut size_t) -> ::libc::c_int;
    pub fn nc_inq_compound_field(ncid: ::libc::c_int, xtype: nc_type,
                                 fieldid: ::libc::c_int,
                                 name: *mut ::libc::c_char,
                                 offsetp: *mut size_t,
                                 field_typeidp: *mut nc_type,
                                 ndimsp: *mut ::libc::c_int,
                                 dim_sizesp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_compound_fieldname(ncid: ::libc::c_int, xtype: nc_type,
                                     fieldid: ::libc::c_int,
                                     name: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_inq_compound_fieldindex(ncid: ::libc::c_int, xtype: nc_type,
                                      name: *const ::libc::c_char,
                                      fieldidp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_compound_fieldoffset(ncid: ::libc::c_int, xtype: nc_type,
                                       fieldid: ::libc::c_int,
                                       offsetp: *mut size_t) -> ::libc::c_int;
    pub fn nc_inq_compound_fieldtype(ncid: ::libc::c_int, xtype: nc_type,
                                     fieldid: ::libc::c_int,
                                     field_typeidp: *mut nc_type)
     -> ::libc::c_int;
    pub fn nc_inq_compound_fieldndims(ncid: ::libc::c_int, xtype: nc_type,
                                      fieldid: ::libc::c_int,
                                      ndimsp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_compound_fielddim_sizes(ncid: ::libc::c_int, xtype: nc_type,
                                          fieldid: ::libc::c_int,
                                          dim_sizes: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_def_vlen(ncid: ::libc::c_int, name: *const ::libc::c_char,
                       base_typeid: nc_type, xtypep: *mut nc_type)
     -> ::libc::c_int;
    pub fn nc_inq_vlen(ncid: ::libc::c_int, xtype: nc_type,
                       name: *mut ::libc::c_char, datum_sizep: *mut size_t,
                       base_nc_typep: *mut nc_type) -> ::libc::c_int;
    pub fn nc_free_vlen(vl: *mut nc_vlen_t) -> ::libc::c_int;
    pub fn nc_free_vlens(len: size_t, vlens: *mut nc_vlen_t) -> ::libc::c_int;
    pub fn nc_put_vlen_element(ncid: ::libc::c_int, typeid1: ::libc::c_int,
                               vlen_element: *mut ::libc::c_void, len: size_t,
                               data: *const ::libc::c_void) -> ::libc::c_int;
    pub fn nc_get_vlen_element(ncid: ::libc::c_int, typeid1: ::libc::c_int,
                               vlen_element: *const ::libc::c_void,
                               len: *mut size_t, data: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn nc_free_string(len: size_t, data: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_inq_user_type(ncid: ::libc::c_int, xtype: nc_type,
                            name: *mut ::libc::c_char, size: *mut size_t,
                            base_nc_typep: *mut nc_type,
                            nfieldsp: *mut size_t, classp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_put_att(ncid: ::libc::c_int, varid: ::libc::c_int,
                      name: *const ::libc::c_char, xtype: nc_type,
                      len: size_t, op: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn nc_get_att(ncid: ::libc::c_int, varid: ::libc::c_int,
                      name: *const ::libc::c_char, ip: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn nc_def_enum(ncid: ::libc::c_int, base_typeid: nc_type,
                       name: *const ::libc::c_char, typeidp: *mut nc_type)
     -> ::libc::c_int;
    pub fn nc_insert_enum(ncid: ::libc::c_int, xtype: nc_type,
                          name: *const ::libc::c_char,
                          value: *const ::libc::c_void) -> ::libc::c_int;
    pub fn nc_inq_enum(ncid: ::libc::c_int, xtype: nc_type,
                       name: *mut ::libc::c_char, base_nc_typep: *mut nc_type,
                       base_sizep: *mut size_t, num_membersp: *mut size_t)
     -> ::libc::c_int;
    pub fn nc_inq_enum_member(ncid: ::libc::c_int, xtype: nc_type,
                              idx: ::libc::c_int, name: *mut ::libc::c_char,
                              value: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn nc_inq_enum_ident(ncid: ::libc::c_int, xtype: nc_type,
                             value: ::libc::c_longlong,
                             identifier: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_def_opaque(ncid: ::libc::c_int, size: size_t,
                         name: *const ::libc::c_char, xtypep: *mut nc_type)
     -> ::libc::c_int;
    pub fn nc_inq_opaque(ncid: ::libc::c_int, xtype: nc_type,
                         name: *mut ::libc::c_char, sizep: *mut size_t)
     -> ::libc::c_int;
    pub fn nc_put_var(ncid: ::libc::c_int, varid: ::libc::c_int,
                      op: *const ::libc::c_void) -> ::libc::c_int;
    pub fn nc_get_var(ncid: ::libc::c_int, varid: ::libc::c_int,
                      ip: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn nc_put_var1(ncid: ::libc::c_int, varid: ::libc::c_int,
                       indexp: *const size_t, op: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn nc_get_var1(ncid: ::libc::c_int, varid: ::libc::c_int,
                       indexp: *const size_t, ip: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn nc_put_vara(ncid: ::libc::c_int, varid: ::libc::c_int,
                       startp: *const size_t, countp: *const size_t,
                       op: *const ::libc::c_void) -> ::libc::c_int;
    pub fn nc_get_vara(ncid: ::libc::c_int, varid: ::libc::c_int,
                       startp: *const size_t, countp: *const size_t,
                       ip: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn nc_put_vars(ncid: ::libc::c_int, varid: ::libc::c_int,
                       startp: *const size_t, countp: *const size_t,
                       stridep: *const ptrdiff_t, op: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn nc_get_vars(ncid: ::libc::c_int, varid: ::libc::c_int,
                       startp: *const size_t, countp: *const size_t,
                       stridep: *const ptrdiff_t, ip: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn nc_put_varm(ncid: ::libc::c_int, varid: ::libc::c_int,
                       startp: *const size_t, countp: *const size_t,
                       stridep: *const ptrdiff_t, imapp: *const ptrdiff_t,
                       op: *const ::libc::c_void) -> ::libc::c_int;
    pub fn nc_get_varm(ncid: ::libc::c_int, varid: ::libc::c_int,
                       startp: *const size_t, countp: *const size_t,
                       stridep: *const ptrdiff_t, imapp: *const ptrdiff_t,
                       ip: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn nc_def_var_deflate(ncid: ::libc::c_int, varid: ::libc::c_int,
                              shuffle: ::libc::c_int, deflate: ::libc::c_int,
                              deflate_level: ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_var_deflate(ncid: ::libc::c_int, varid: ::libc::c_int,
                              shufflep: *mut ::libc::c_int,
                              deflatep: *mut ::libc::c_int,
                              deflate_levelp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_var_szip(ncid: ::libc::c_int, varid: ::libc::c_int,
                           options_maskp: *mut ::libc::c_int,
                           pixels_per_blockp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_def_var_fletcher32(ncid: ::libc::c_int, varid: ::libc::c_int,
                                 fletcher32: ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_var_fletcher32(ncid: ::libc::c_int, varid: ::libc::c_int,
                                 fletcher32p: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_def_var_chunking(ncid: ::libc::c_int, varid: ::libc::c_int,
                               storage: ::libc::c_int,
                               chunksizesp: *const size_t) -> ::libc::c_int;
    pub fn nc_inq_var_chunking(ncid: ::libc::c_int, varid: ::libc::c_int,
                               storagep: *mut ::libc::c_int,
                               chunksizesp: *mut size_t) -> ::libc::c_int;
    pub fn nc_def_var_fill(ncid: ::libc::c_int, varid: ::libc::c_int,
                           no_fill: ::libc::c_int,
                           fill_value: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn nc_inq_var_fill(ncid: ::libc::c_int, varid: ::libc::c_int,
                           no_fill: *mut ::libc::c_int,
                           fill_valuep: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn nc_def_var_endian(ncid: ::libc::c_int, varid: ::libc::c_int,
                             endian: ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_var_endian(ncid: ::libc::c_int, varid: ::libc::c_int,
                             endianp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_set_fill(ncid: ::libc::c_int, fillmode: ::libc::c_int,
                       old_modep: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_set_default_format(format: ::libc::c_int,
                                 old_formatp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_set_chunk_cache(size: size_t, nelems: size_t,
                              preemption: ::libc::c_float) -> ::libc::c_int;
    pub fn nc_get_chunk_cache(sizep: *mut size_t, nelemsp: *mut size_t,
                              preemptionp: *mut ::libc::c_float)
     -> ::libc::c_int;
    pub fn nc_set_var_chunk_cache(ncid: ::libc::c_int, varid: ::libc::c_int,
                                  size: size_t, nelems: size_t,
                                  preemption: ::libc::c_float)
     -> ::libc::c_int;
    pub fn nc_get_var_chunk_cache(ncid: ::libc::c_int, varid: ::libc::c_int,
                                  sizep: *mut size_t, nelemsp: *mut size_t,
                                  preemptionp: *mut ::libc::c_float)
     -> ::libc::c_int;
    pub fn nc_redef(ncid: ::libc::c_int) -> ::libc::c_int;
    pub fn nc__enddef(ncid: ::libc::c_int, h_minfree: size_t, v_align: size_t,
                      v_minfree: size_t, r_align: size_t) -> ::libc::c_int;
    pub fn nc_enddef(ncid: ::libc::c_int) -> ::libc::c_int;
    pub fn nc_sync(ncid: ::libc::c_int) -> ::libc::c_int;
    pub fn nc_abort(ncid: ::libc::c_int) -> ::libc::c_int;
    pub fn nc_close(ncid: ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq(ncid: ::libc::c_int, ndimsp: *mut ::libc::c_int,
                  nvarsp: *mut ::libc::c_int, nattsp: *mut ::libc::c_int,
                  unlimdimidp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_ndims(ncid: ::libc::c_int, ndimsp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_nvars(ncid: ::libc::c_int, nvarsp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_natts(ncid: ::libc::c_int, nattsp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_unlimdim(ncid: ::libc::c_int,
                           unlimdimidp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_unlimdims(ncid: ::libc::c_int,
                            nunlimdimsp: *mut ::libc::c_int,
                            unlimdimidsp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_format(ncid: ::libc::c_int, formatp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_format_extended(ncid: ::libc::c_int,
                                  formatp: *mut ::libc::c_int,
                                  modep: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_def_dim(ncid: ::libc::c_int, name: *const ::libc::c_char,
                      len: size_t, idp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_dimid(ncid: ::libc::c_int, name: *const ::libc::c_char,
                        idp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_dim(ncid: ::libc::c_int, dimid: ::libc::c_int,
                      name: *mut ::libc::c_char, lenp: *mut size_t)
     -> ::libc::c_int;
    pub fn nc_inq_dimname(ncid: ::libc::c_int, dimid: ::libc::c_int,
                          name: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_inq_dimlen(ncid: ::libc::c_int, dimid: ::libc::c_int,
                         lenp: *mut size_t) -> ::libc::c_int;
    pub fn nc_rename_dim(ncid: ::libc::c_int, dimid: ::libc::c_int,
                         name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_inq_att(ncid: ::libc::c_int, varid: ::libc::c_int,
                      name: *const ::libc::c_char, xtypep: *mut nc_type,
                      lenp: *mut size_t) -> ::libc::c_int;
    pub fn nc_inq_attid(ncid: ::libc::c_int, varid: ::libc::c_int,
                        name: *const ::libc::c_char, idp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_atttype(ncid: ::libc::c_int, varid: ::libc::c_int,
                          name: *const ::libc::c_char, xtypep: *mut nc_type)
     -> ::libc::c_int;
    pub fn nc_inq_attlen(ncid: ::libc::c_int, varid: ::libc::c_int,
                         name: *const ::libc::c_char, lenp: *mut size_t)
     -> ::libc::c_int;
    pub fn nc_inq_attname(ncid: ::libc::c_int, varid: ::libc::c_int,
                          attnum: ::libc::c_int, name: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_copy_att(ncid_in: ::libc::c_int, varid_in: ::libc::c_int,
                       name: *const ::libc::c_char, ncid_out: ::libc::c_int,
                       varid_out: ::libc::c_int) -> ::libc::c_int;
    pub fn nc_rename_att(ncid: ::libc::c_int, varid: ::libc::c_int,
                         name: *const ::libc::c_char,
                         newname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_del_att(ncid: ::libc::c_int, varid: ::libc::c_int,
                      name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_att_text(ncid: ::libc::c_int, varid: ::libc::c_int,
                           name: *const ::libc::c_char, len: size_t,
                           op: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_get_att_text(ncid: ::libc::c_int, varid: ::libc::c_int,
                           name: *const ::libc::c_char,
                           ip: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_att_uchar(ncid: ::libc::c_int, varid: ::libc::c_int,
                            name: *const ::libc::c_char, xtype: nc_type,
                            len: size_t, op: *const ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn nc_get_att_uchar(ncid: ::libc::c_int, varid: ::libc::c_int,
                            name: *const ::libc::c_char,
                            ip: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_put_att_schar(ncid: ::libc::c_int, varid: ::libc::c_int,
                            name: *const ::libc::c_char, xtype: nc_type,
                            len: size_t, op: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_get_att_schar(ncid: ::libc::c_int, varid: ::libc::c_int,
                            name: *const ::libc::c_char,
                            ip: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_att_short(ncid: ::libc::c_int, varid: ::libc::c_int,
                            name: *const ::libc::c_char, xtype: nc_type,
                            len: size_t, op: *const ::libc::c_short)
     -> ::libc::c_int;
    pub fn nc_get_att_short(ncid: ::libc::c_int, varid: ::libc::c_int,
                            name: *const ::libc::c_char,
                            ip: *mut ::libc::c_short) -> ::libc::c_int;
    pub fn nc_put_att_int(ncid: ::libc::c_int, varid: ::libc::c_int,
                          name: *const ::libc::c_char, xtype: nc_type,
                          len: size_t, op: *const ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_get_att_int(ncid: ::libc::c_int, varid: ::libc::c_int,
                          name: *const ::libc::c_char, ip: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_put_att_long(ncid: ::libc::c_int, varid: ::libc::c_int,
                           name: *const ::libc::c_char, xtype: nc_type,
                           len: size_t, op: *const ::libc::c_long)
     -> ::libc::c_int;
    pub fn nc_get_att_long(ncid: ::libc::c_int, varid: ::libc::c_int,
                           name: *const ::libc::c_char,
                           ip: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn nc_put_att_float(ncid: ::libc::c_int, varid: ::libc::c_int,
                            name: *const ::libc::c_char, xtype: nc_type,
                            len: size_t, op: *const ::libc::c_float)
     -> ::libc::c_int;
    pub fn nc_get_att_float(ncid: ::libc::c_int, varid: ::libc::c_int,
                            name: *const ::libc::c_char,
                            ip: *mut ::libc::c_float) -> ::libc::c_int;
    pub fn nc_put_att_double(ncid: ::libc::c_int, varid: ::libc::c_int,
                             name: *const ::libc::c_char, xtype: nc_type,
                             len: size_t, op: *const ::libc::c_double)
     -> ::libc::c_int;
    pub fn nc_get_att_double(ncid: ::libc::c_int, varid: ::libc::c_int,
                             name: *const ::libc::c_char,
                             ip: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn nc_put_att_ushort(ncid: ::libc::c_int, varid: ::libc::c_int,
                             name: *const ::libc::c_char, xtype: nc_type,
                             len: size_t, op: *const ::libc::c_ushort)
     -> ::libc::c_int;
    pub fn nc_get_att_ushort(ncid: ::libc::c_int, varid: ::libc::c_int,
                             name: *const ::libc::c_char,
                             ip: *mut ::libc::c_ushort) -> ::libc::c_int;
    pub fn nc_put_att_uint(ncid: ::libc::c_int, varid: ::libc::c_int,
                           name: *const ::libc::c_char, xtype: nc_type,
                           len: size_t, op: *const ::libc::c_uint)
     -> ::libc::c_int;
    pub fn nc_get_att_uint(ncid: ::libc::c_int, varid: ::libc::c_int,
                           name: *const ::libc::c_char,
                           ip: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn nc_put_att_longlong(ncid: ::libc::c_int, varid: ::libc::c_int,
                               name: *const ::libc::c_char, xtype: nc_type,
                               len: size_t, op: *const ::libc::c_longlong)
     -> ::libc::c_int;
    pub fn nc_get_att_longlong(ncid: ::libc::c_int, varid: ::libc::c_int,
                               name: *const ::libc::c_char,
                               ip: *mut ::libc::c_longlong) -> ::libc::c_int;
    pub fn nc_put_att_ulonglong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                name: *const ::libc::c_char, xtype: nc_type,
                                len: size_t, op: *const ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn nc_get_att_ulonglong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                name: *const ::libc::c_char,
                                ip: *mut ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn nc_put_att_string(ncid: ::libc::c_int, varid: ::libc::c_int,
                             name: *const ::libc::c_char, len: size_t,
                             op: *mut *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_get_att_string(ncid: ::libc::c_int, varid: ::libc::c_int,
                             name: *const ::libc::c_char,
                             ip: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_def_var(ncid: ::libc::c_int, name: *const ::libc::c_char,
                      xtype: nc_type, ndims: ::libc::c_int,
                      dimidsp: *const ::libc::c_int,
                      varidp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_var(ncid: ::libc::c_int, varid: ::libc::c_int,
                      name: *mut ::libc::c_char, xtypep: *mut nc_type,
                      ndimsp: *mut ::libc::c_int, dimidsp: *mut ::libc::c_int,
                      nattsp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_varid(ncid: ::libc::c_int, name: *const ::libc::c_char,
                        varidp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_varname(ncid: ::libc::c_int, varid: ::libc::c_int,
                          name: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_inq_vartype(ncid: ::libc::c_int, varid: ::libc::c_int,
                          xtypep: *mut nc_type) -> ::libc::c_int;
    pub fn nc_inq_varndims(ncid: ::libc::c_int, varid: ::libc::c_int,
                           ndimsp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_vardimid(ncid: ::libc::c_int, varid: ::libc::c_int,
                           dimidsp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_inq_varnatts(ncid: ::libc::c_int, varid: ::libc::c_int,
                           nattsp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_rename_var(ncid: ::libc::c_int, varid: ::libc::c_int,
                         name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_copy_var(ncid_in: ::libc::c_int, varid: ::libc::c_int,
                       ncid_out: ::libc::c_int) -> ::libc::c_int;
    pub fn nc_put_var1_text(ncid: ::libc::c_int, varid: ::libc::c_int,
                            indexp: *const size_t, op: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_get_var1_text(ncid: ::libc::c_int, varid: ::libc::c_int,
                            indexp: *const size_t, ip: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_put_var1_uchar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             indexp: *const size_t,
                             op: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_get_var1_uchar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             indexp: *const size_t, ip: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn nc_put_var1_schar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             indexp: *const size_t, op: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_get_var1_schar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             indexp: *const size_t, ip: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_put_var1_short(ncid: ::libc::c_int, varid: ::libc::c_int,
                             indexp: *const size_t,
                             op: *const ::libc::c_short) -> ::libc::c_int;
    pub fn nc_get_var1_short(ncid: ::libc::c_int, varid: ::libc::c_int,
                             indexp: *const size_t, ip: *mut ::libc::c_short)
     -> ::libc::c_int;
    pub fn nc_put_var1_int(ncid: ::libc::c_int, varid: ::libc::c_int,
                           indexp: *const size_t, op: *const ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_get_var1_int(ncid: ::libc::c_int, varid: ::libc::c_int,
                           indexp: *const size_t, ip: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_put_var1_long(ncid: ::libc::c_int, varid: ::libc::c_int,
                            indexp: *const size_t, op: *const ::libc::c_long)
     -> ::libc::c_int;
    pub fn nc_get_var1_long(ncid: ::libc::c_int, varid: ::libc::c_int,
                            indexp: *const size_t, ip: *mut ::libc::c_long)
     -> ::libc::c_int;
    pub fn nc_put_var1_float(ncid: ::libc::c_int, varid: ::libc::c_int,
                             indexp: *const size_t,
                             op: *const ::libc::c_float) -> ::libc::c_int;
    pub fn nc_get_var1_float(ncid: ::libc::c_int, varid: ::libc::c_int,
                             indexp: *const size_t, ip: *mut ::libc::c_float)
     -> ::libc::c_int;
    pub fn nc_put_var1_double(ncid: ::libc::c_int, varid: ::libc::c_int,
                              indexp: *const size_t,
                              op: *const ::libc::c_double) -> ::libc::c_int;
    pub fn nc_get_var1_double(ncid: ::libc::c_int, varid: ::libc::c_int,
                              indexp: *const size_t,
                              ip: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn nc_put_var1_ushort(ncid: ::libc::c_int, varid: ::libc::c_int,
                              indexp: *const size_t,
                              op: *const ::libc::c_ushort) -> ::libc::c_int;
    pub fn nc_get_var1_ushort(ncid: ::libc::c_int, varid: ::libc::c_int,
                              indexp: *const size_t,
                              ip: *mut ::libc::c_ushort) -> ::libc::c_int;
    pub fn nc_put_var1_uint(ncid: ::libc::c_int, varid: ::libc::c_int,
                            indexp: *const size_t, op: *const ::libc::c_uint)
     -> ::libc::c_int;
    pub fn nc_get_var1_uint(ncid: ::libc::c_int, varid: ::libc::c_int,
                            indexp: *const size_t, ip: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn nc_put_var1_longlong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                indexp: *const size_t,
                                op: *const ::libc::c_longlong)
     -> ::libc::c_int;
    pub fn nc_get_var1_longlong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                indexp: *const size_t,
                                ip: *mut ::libc::c_longlong) -> ::libc::c_int;
    pub fn nc_put_var1_ulonglong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                 indexp: *const size_t,
                                 op: *const ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn nc_get_var1_ulonglong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                 indexp: *const size_t,
                                 ip: *mut ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn nc_put_var1_string(ncid: ::libc::c_int, varid: ::libc::c_int,
                              indexp: *const size_t,
                              op: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_get_var1_string(ncid: ::libc::c_int, varid: ::libc::c_int,
                              indexp: *const size_t,
                              ip: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_vara_text(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            op: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_get_vara_text(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            ip: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_vara_uchar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             op: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_get_vara_uchar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             ip: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_put_vara_schar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             op: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_get_vara_schar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             ip: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_vara_short(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             op: *const ::libc::c_short) -> ::libc::c_int;
    pub fn nc_get_vara_short(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             ip: *mut ::libc::c_short) -> ::libc::c_int;
    pub fn nc_put_vara_int(ncid: ::libc::c_int, varid: ::libc::c_int,
                           startp: *const size_t, countp: *const size_t,
                           op: *const ::libc::c_int) -> ::libc::c_int;
    pub fn nc_get_vara_int(ncid: ::libc::c_int, varid: ::libc::c_int,
                           startp: *const size_t, countp: *const size_t,
                           ip: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_put_vara_long(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            op: *const ::libc::c_long) -> ::libc::c_int;
    pub fn nc_get_vara_long(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            ip: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn nc_put_vara_float(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             op: *const ::libc::c_float) -> ::libc::c_int;
    pub fn nc_get_vara_float(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             ip: *mut ::libc::c_float) -> ::libc::c_int;
    pub fn nc_put_vara_double(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              op: *const ::libc::c_double) -> ::libc::c_int;
    pub fn nc_get_vara_double(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              ip: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn nc_put_vara_ushort(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              op: *const ::libc::c_ushort) -> ::libc::c_int;
    pub fn nc_get_vara_ushort(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              ip: *mut ::libc::c_ushort) -> ::libc::c_int;
    pub fn nc_put_vara_uint(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            op: *const ::libc::c_uint) -> ::libc::c_int;
    pub fn nc_get_vara_uint(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            ip: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn nc_put_vara_longlong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                startp: *const size_t, countp: *const size_t,
                                op: *const ::libc::c_longlong)
     -> ::libc::c_int;
    pub fn nc_get_vara_longlong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                startp: *const size_t, countp: *const size_t,
                                ip: *mut ::libc::c_longlong) -> ::libc::c_int;
    pub fn nc_put_vara_ulonglong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                 startp: *const size_t, countp: *const size_t,
                                 op: *const ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn nc_get_vara_ulonglong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                 startp: *const size_t, countp: *const size_t,
                                 ip: *mut ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn nc_put_vara_string(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              op: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_get_vara_string(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              ip: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_vars_text(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            stridep: *const ptrdiff_t,
                            op: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_get_vars_text(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            stridep: *const ptrdiff_t,
                            ip: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_vars_uchar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             op: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_get_vars_uchar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             ip: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_put_vars_schar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             op: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_get_vars_schar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             ip: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_vars_short(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             op: *const ::libc::c_short) -> ::libc::c_int;
    pub fn nc_get_vars_short(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             ip: *mut ::libc::c_short) -> ::libc::c_int;
    pub fn nc_put_vars_int(ncid: ::libc::c_int, varid: ::libc::c_int,
                           startp: *const size_t, countp: *const size_t,
                           stridep: *const ptrdiff_t,
                           op: *const ::libc::c_int) -> ::libc::c_int;
    pub fn nc_get_vars_int(ncid: ::libc::c_int, varid: ::libc::c_int,
                           startp: *const size_t, countp: *const size_t,
                           stridep: *const ptrdiff_t, ip: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_put_vars_long(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            stridep: *const ptrdiff_t,
                            op: *const ::libc::c_long) -> ::libc::c_int;
    pub fn nc_get_vars_long(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            stridep: *const ptrdiff_t,
                            ip: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn nc_put_vars_float(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             op: *const ::libc::c_float) -> ::libc::c_int;
    pub fn nc_get_vars_float(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             ip: *mut ::libc::c_float) -> ::libc::c_int;
    pub fn nc_put_vars_double(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              stridep: *const ptrdiff_t,
                              op: *const ::libc::c_double) -> ::libc::c_int;
    pub fn nc_get_vars_double(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              stridep: *const ptrdiff_t,
                              ip: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn nc_put_vars_ushort(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              stridep: *const ptrdiff_t,
                              op: *const ::libc::c_ushort) -> ::libc::c_int;
    pub fn nc_get_vars_ushort(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              stridep: *const ptrdiff_t,
                              ip: *mut ::libc::c_ushort) -> ::libc::c_int;
    pub fn nc_put_vars_uint(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            stridep: *const ptrdiff_t,
                            op: *const ::libc::c_uint) -> ::libc::c_int;
    pub fn nc_get_vars_uint(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            stridep: *const ptrdiff_t,
                            ip: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn nc_put_vars_longlong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                startp: *const size_t, countp: *const size_t,
                                stridep: *const ptrdiff_t,
                                op: *const ::libc::c_longlong)
     -> ::libc::c_int;
    pub fn nc_get_vars_longlong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                startp: *const size_t, countp: *const size_t,
                                stridep: *const ptrdiff_t,
                                ip: *mut ::libc::c_longlong) -> ::libc::c_int;
    pub fn nc_put_vars_ulonglong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                 startp: *const size_t, countp: *const size_t,
                                 stridep: *const ptrdiff_t,
                                 op: *const ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn nc_get_vars_ulonglong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                 startp: *const size_t, countp: *const size_t,
                                 stridep: *const ptrdiff_t,
                                 ip: *mut ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn nc_put_vars_string(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              stridep: *const ptrdiff_t,
                              op: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_get_vars_string(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              stridep: *const ptrdiff_t,
                              ip: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_varm_text(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            stridep: *const ptrdiff_t,
                            imapp: *const ptrdiff_t,
                            op: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_get_varm_text(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            stridep: *const ptrdiff_t,
                            imapp: *const ptrdiff_t, ip: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_put_varm_uchar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             imapp: *const ptrdiff_t,
                             op: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_get_varm_uchar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             imapp: *const ptrdiff_t,
                             ip: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_put_varm_schar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             imapp: *const ptrdiff_t,
                             op: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_get_varm_schar(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             imapp: *const ptrdiff_t, ip: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_put_varm_short(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             imapp: *const ptrdiff_t,
                             op: *const ::libc::c_short) -> ::libc::c_int;
    pub fn nc_get_varm_short(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             imapp: *const ptrdiff_t,
                             ip: *mut ::libc::c_short) -> ::libc::c_int;
    pub fn nc_put_varm_int(ncid: ::libc::c_int, varid: ::libc::c_int,
                           startp: *const size_t, countp: *const size_t,
                           stridep: *const ptrdiff_t, imapp: *const ptrdiff_t,
                           op: *const ::libc::c_int) -> ::libc::c_int;
    pub fn nc_get_varm_int(ncid: ::libc::c_int, varid: ::libc::c_int,
                           startp: *const size_t, countp: *const size_t,
                           stridep: *const ptrdiff_t, imapp: *const ptrdiff_t,
                           ip: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_put_varm_long(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            stridep: *const ptrdiff_t,
                            imapp: *const ptrdiff_t,
                            op: *const ::libc::c_long) -> ::libc::c_int;
    pub fn nc_get_varm_long(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            stridep: *const ptrdiff_t,
                            imapp: *const ptrdiff_t, ip: *mut ::libc::c_long)
     -> ::libc::c_int;
    pub fn nc_put_varm_float(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             imapp: *const ptrdiff_t,
                             op: *const ::libc::c_float) -> ::libc::c_int;
    pub fn nc_get_varm_float(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             imapp: *const ptrdiff_t,
                             ip: *mut ::libc::c_float) -> ::libc::c_int;
    pub fn nc_put_varm_double(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              stridep: *const ptrdiff_t,
                              imapp: *const ptrdiff_t,
                              op: *const ::libc::c_double) -> ::libc::c_int;
    pub fn nc_get_varm_double(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              stridep: *const ptrdiff_t,
                              imapp: *const ptrdiff_t,
                              ip: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn nc_put_varm_ushort(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              stridep: *const ptrdiff_t,
                              imapp: *const ptrdiff_t,
                              op: *const ::libc::c_ushort) -> ::libc::c_int;
    pub fn nc_get_varm_ushort(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              stridep: *const ptrdiff_t,
                              imapp: *const ptrdiff_t,
                              ip: *mut ::libc::c_ushort) -> ::libc::c_int;
    pub fn nc_put_varm_uint(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            stridep: *const ptrdiff_t,
                            imapp: *const ptrdiff_t,
                            op: *const ::libc::c_uint) -> ::libc::c_int;
    pub fn nc_get_varm_uint(ncid: ::libc::c_int, varid: ::libc::c_int,
                            startp: *const size_t, countp: *const size_t,
                            stridep: *const ptrdiff_t,
                            imapp: *const ptrdiff_t, ip: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn nc_put_varm_longlong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                startp: *const size_t, countp: *const size_t,
                                stridep: *const ptrdiff_t,
                                imapp: *const ptrdiff_t,
                                op: *const ::libc::c_longlong)
     -> ::libc::c_int;
    pub fn nc_get_varm_longlong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                startp: *const size_t, countp: *const size_t,
                                stridep: *const ptrdiff_t,
                                imapp: *const ptrdiff_t,
                                ip: *mut ::libc::c_longlong) -> ::libc::c_int;
    pub fn nc_put_varm_ulonglong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                 startp: *const size_t, countp: *const size_t,
                                 stridep: *const ptrdiff_t,
                                 imapp: *const ptrdiff_t,
                                 op: *const ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn nc_get_varm_ulonglong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                 startp: *const size_t, countp: *const size_t,
                                 stridep: *const ptrdiff_t,
                                 imapp: *const ptrdiff_t,
                                 ip: *mut ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn nc_put_varm_string(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              stridep: *const ptrdiff_t,
                              imapp: *const ptrdiff_t,
                              op: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn nc_get_varm_string(ncid: ::libc::c_int, varid: ::libc::c_int,
                              startp: *const size_t, countp: *const size_t,
                              stridep: *const ptrdiff_t,
                              imapp: *const ptrdiff_t,
                              ip: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_var_text(ncid: ::libc::c_int, varid: ::libc::c_int,
                           op: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_get_var_text(ncid: ::libc::c_int, varid: ::libc::c_int,
                           ip: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_var_uchar(ncid: ::libc::c_int, varid: ::libc::c_int,
                            op: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_get_var_uchar(ncid: ::libc::c_int, varid: ::libc::c_int,
                            ip: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_put_var_schar(ncid: ::libc::c_int, varid: ::libc::c_int,
                            op: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_get_var_schar(ncid: ::libc::c_int, varid: ::libc::c_int,
                            ip: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_var_short(ncid: ::libc::c_int, varid: ::libc::c_int,
                            op: *const ::libc::c_short) -> ::libc::c_int;
    pub fn nc_get_var_short(ncid: ::libc::c_int, varid: ::libc::c_int,
                            ip: *mut ::libc::c_short) -> ::libc::c_int;
    pub fn nc_put_var_int(ncid: ::libc::c_int, varid: ::libc::c_int,
                          op: *const ::libc::c_int) -> ::libc::c_int;
    pub fn nc_get_var_int(ncid: ::libc::c_int, varid: ::libc::c_int,
                          ip: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_put_var_long(ncid: ::libc::c_int, varid: ::libc::c_int,
                           op: *const ::libc::c_long) -> ::libc::c_int;
    pub fn nc_get_var_long(ncid: ::libc::c_int, varid: ::libc::c_int,
                           ip: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn nc_put_var_float(ncid: ::libc::c_int, varid: ::libc::c_int,
                            op: *const ::libc::c_float) -> ::libc::c_int;
    pub fn nc_get_var_float(ncid: ::libc::c_int, varid: ::libc::c_int,
                            ip: *mut ::libc::c_float) -> ::libc::c_int;
    pub fn nc_put_var_double(ncid: ::libc::c_int, varid: ::libc::c_int,
                             op: *const ::libc::c_double) -> ::libc::c_int;
    pub fn nc_get_var_double(ncid: ::libc::c_int, varid: ::libc::c_int,
                             ip: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn nc_put_var_ushort(ncid: ::libc::c_int, varid: ::libc::c_int,
                             op: *const ::libc::c_ushort) -> ::libc::c_int;
    pub fn nc_get_var_ushort(ncid: ::libc::c_int, varid: ::libc::c_int,
                             ip: *mut ::libc::c_ushort) -> ::libc::c_int;
    pub fn nc_put_var_uint(ncid: ::libc::c_int, varid: ::libc::c_int,
                           op: *const ::libc::c_uint) -> ::libc::c_int;
    pub fn nc_get_var_uint(ncid: ::libc::c_int, varid: ::libc::c_int,
                           ip: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn nc_put_var_longlong(ncid: ::libc::c_int, varid: ::libc::c_int,
                               op: *const ::libc::c_longlong)
     -> ::libc::c_int;
    pub fn nc_get_var_longlong(ncid: ::libc::c_int, varid: ::libc::c_int,
                               ip: *mut ::libc::c_longlong) -> ::libc::c_int;
    pub fn nc_put_var_ulonglong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                op: *const ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn nc_get_var_ulonglong(ncid: ::libc::c_int, varid: ::libc::c_int,
                                ip: *mut ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn nc_put_var_string(ncid: ::libc::c_int, varid: ::libc::c_int,
                             op: *mut *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_get_var_string(ncid: ::libc::c_int, varid: ::libc::c_int,
                             ip: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn nc_put_att_ubyte(ncid: ::libc::c_int, varid: ::libc::c_int,
                            name: *const ::libc::c_char, xtype: nc_type,
                            len: size_t, op: *const ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn nc_get_att_ubyte(ncid: ::libc::c_int, varid: ::libc::c_int,
                            name: *const ::libc::c_char,
                            ip: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_put_var1_ubyte(ncid: ::libc::c_int, varid: ::libc::c_int,
                             indexp: *const size_t,
                             op: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_get_var1_ubyte(ncid: ::libc::c_int, varid: ::libc::c_int,
                             indexp: *const size_t, ip: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn nc_put_vara_ubyte(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             op: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_get_vara_ubyte(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             ip: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_put_vars_ubyte(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             op: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_get_vars_ubyte(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             ip: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_put_varm_ubyte(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             imapp: *const ptrdiff_t,
                             op: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_get_varm_ubyte(ncid: ::libc::c_int, varid: ::libc::c_int,
                             startp: *const size_t, countp: *const size_t,
                             stridep: *const ptrdiff_t,
                             imapp: *const ptrdiff_t,
                             ip: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_put_var_ubyte(ncid: ::libc::c_int, varid: ::libc::c_int,
                            op: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_get_var_ubyte(ncid: ::libc::c_int, varid: ::libc::c_int,
                            ip: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn nc_show_metadata(ncid: ::libc::c_int) -> ::libc::c_int;
    pub fn nc__create_mp(path: *const ::libc::c_char, cmode: ::libc::c_int,
                         initialsz: size_t, basepe: ::libc::c_int,
                         chunksizehintp: *mut size_t,
                         ncidp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc__open_mp(path: *const ::libc::c_char, mode: ::libc::c_int,
                       basepe: ::libc::c_int, chunksizehintp: *mut size_t,
                       ncidp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn nc_delete(path: *const ::libc::c_char) -> ::libc::c_int;
    pub fn nc_delete_mp(path: *const ::libc::c_char, basepe: ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_set_base_pe(ncid: ::libc::c_int, pe: ::libc::c_int)
     -> ::libc::c_int;
    pub fn nc_inq_base_pe(ncid: ::libc::c_int, pe: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn nctypelen(datatype: nc_type) -> ::libc::c_int;
    pub fn nc_advise(cdf_routine_name: *const ::libc::c_char,
                     err: ::libc::c_int, fmt: *const ::libc::c_char, ...)
     -> ();
    pub fn nccreate(path: *const ::libc::c_char, cmode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ncopen(path: *const ::libc::c_char, mode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ncsetfill(ncid: ::libc::c_int, fillmode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ncredef(ncid: ::libc::c_int) -> ::libc::c_int;
    pub fn ncendef(ncid: ::libc::c_int) -> ::libc::c_int;
    pub fn ncsync(ncid: ::libc::c_int) -> ::libc::c_int;
    pub fn ncabort(ncid: ::libc::c_int) -> ::libc::c_int;
    pub fn ncclose(ncid: ::libc::c_int) -> ::libc::c_int;
    pub fn ncinquire(ncid: ::libc::c_int, ndimsp: *mut ::libc::c_int,
                     nvarsp: *mut ::libc::c_int, nattsp: *mut ::libc::c_int,
                     unlimdimp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn ncdimdef(ncid: ::libc::c_int, name: *const ::libc::c_char,
                    len: ::libc::c_long) -> ::libc::c_int;
    pub fn ncdimid(ncid: ::libc::c_int, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn ncdiminq(ncid: ::libc::c_int, dimid: ::libc::c_int,
                    name: *mut ::libc::c_char, lenp: *mut ::libc::c_long)
     -> ::libc::c_int;
    pub fn ncdimrename(ncid: ::libc::c_int, dimid: ::libc::c_int,
                       name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ncattput(ncid: ::libc::c_int, varid: ::libc::c_int,
                    name: *const ::libc::c_char, xtype: nc_type,
                    len: ::libc::c_int, op: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn ncattinq(ncid: ::libc::c_int, varid: ::libc::c_int,
                    name: *const ::libc::c_char, xtypep: *mut nc_type,
                    lenp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn ncattget(ncid: ::libc::c_int, varid: ::libc::c_int,
                    name: *const ::libc::c_char, ip: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn ncattcopy(ncid_in: ::libc::c_int, varid_in: ::libc::c_int,
                     name: *const ::libc::c_char, ncid_out: ::libc::c_int,
                     varid_out: ::libc::c_int) -> ::libc::c_int;
    pub fn ncattname(ncid: ::libc::c_int, varid: ::libc::c_int,
                     attnum: ::libc::c_int, name: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn ncattrename(ncid: ::libc::c_int, varid: ::libc::c_int,
                       name: *const ::libc::c_char,
                       newname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ncattdel(ncid: ::libc::c_int, varid: ::libc::c_int,
                    name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ncvardef(ncid: ::libc::c_int, name: *const ::libc::c_char,
                    xtype: nc_type, ndims: ::libc::c_int,
                    dimidsp: *const ::libc::c_int) -> ::libc::c_int;
    pub fn ncvarid(ncid: ::libc::c_int, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn ncvarinq(ncid: ::libc::c_int, varid: ::libc::c_int,
                    name: *mut ::libc::c_char, xtypep: *mut nc_type,
                    ndimsp: *mut ::libc::c_int, dimidsp: *mut ::libc::c_int,
                    nattsp: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn ncvarput1(ncid: ::libc::c_int, varid: ::libc::c_int,
                     indexp: *const ::libc::c_long, op: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn ncvarget1(ncid: ::libc::c_int, varid: ::libc::c_int,
                     indexp: *const ::libc::c_long, ip: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn ncvarput(ncid: ::libc::c_int, varid: ::libc::c_int,
                    startp: *const ::libc::c_long,
                    countp: *const ::libc::c_long, op: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn ncvarget(ncid: ::libc::c_int, varid: ::libc::c_int,
                    startp: *const ::libc::c_long,
                    countp: *const ::libc::c_long, ip: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn ncvarputs(ncid: ::libc::c_int, varid: ::libc::c_int,
                     startp: *const ::libc::c_long,
                     countp: *const ::libc::c_long,
                     stridep: *const ::libc::c_long,
                     op: *const ::libc::c_void) -> ::libc::c_int;
    pub fn ncvargets(ncid: ::libc::c_int, varid: ::libc::c_int,
                     startp: *const ::libc::c_long,
                     countp: *const ::libc::c_long,
                     stridep: *const ::libc::c_long, ip: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn ncvarputg(ncid: ::libc::c_int, varid: ::libc::c_int,
                     startp: *const ::libc::c_long,
                     countp: *const ::libc::c_long,
                     stridep: *const ::libc::c_long,
                     imapp: *const ::libc::c_long, op: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn ncvargetg(ncid: ::libc::c_int, varid: ::libc::c_int,
                     startp: *const ::libc::c_long,
                     countp: *const ::libc::c_long,
                     stridep: *const ::libc::c_long,
                     imapp: *const ::libc::c_long, ip: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn ncvarrename(ncid: ::libc::c_int, varid: ::libc::c_int,
                       name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ncrecinq(ncid: ::libc::c_int, nrecvarsp: *mut ::libc::c_int,
                    recvaridsp: *mut ::libc::c_int,
                    recsizesp: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn ncrecget(ncid: ::libc::c_int, recnum: ::libc::c_long,
                    datap: *mut *mut ::libc::c_void) -> ::libc::c_int;
    pub fn ncrecput(ncid: ::libc::c_int, recnum: ::libc::c_long,
                    datap: *const *mut ::libc::c_void) -> ::libc::c_int;
}
